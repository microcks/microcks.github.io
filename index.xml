<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API Mocking and Testing | Microcks.io</title><link>https://microcks.io/</link><description>Recent content on API Mocking and Testing | Microcks.io</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Thu, 23 Jan 2025 00:00:00 +0100</lastBuildDate><atom:link href="https://microcks.io/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenAPI Conventions</title><link>https://microcks.io/documentation/references/artifacts/openapi-conventions/</link><pubDate>Mon, 27 May 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/artifacts/openapi-conventions/</guid><description>Conventions In addition of schema information, Microcks uses OpenAPI Example Objects to produce working mocks and build test suite for validating your implementation.
As example fragments are actually distributed along the OpenAPI specification, Microcks collects fragments and try to associate them by name. Microcks only takes care of comprehensive request/response examples - which means that if you provide examples for input elements (parameter, requestBody) but not for output (response), incomplete examples will be discarded.</description></item><item><title>Deployment topologies</title><link>https://microcks.io/documentation/explanations/deployment-topologies/</link><pubDate>Tue, 10 Dec 2024 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/explanations/deployment-topologies/</guid><description>Introduction We often get the question from people who are adopting Microcks on the deployment toplogy: Where to deploy it and which personas to target? Microcks is modular and flexible, and it runs in many different ways, and having many options can make it unclear to novice users where to begin and how to get started.
In this article we share our experience on different tolopologies - or patterns - we&amp;rsquo;ve seen adopted depending on organization maturity and priorities.</description></item><item><title>Container Images</title><link>https://microcks.io/documentation/references/container-images/</link><pubDate>Mon, 13 May 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/container-images/</guid><description>Introduction Microcks components are distributed as OCI container images that can be executed using container runtimes such as Docker or Podman. All our container images are produced for both linux/amd64 and linux/arm64 architectures.
The components container image tags are respecting the following versioning scheme:
The x.y.z tag identifies a released and stable version of the image, produced from a GitHub repo tag. This is an immutable tag, The latest tag identifies the latest released and stable version of the image.</description></item><item><title>As a Docker Desktop Extension</title><link>https://microcks.io/documentation/guides/installation/docker-desktop-extension/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/installation/docker-desktop-extension/</guid><description>This guide shows you how to install Microcks as a Docker Desktop Extension on your local machine. This way of installing Microcks is very convenient for people wanted to start quickly with most common Microcks capabilities and without hitting the terminal üëª
Docker Desktop is a simple-to-install application for Mac, Windows, or Linux that allows you to create and share containerized applications and microservices. Docker Desktop includes the Docker Engine, the Docker CLI client, Docker Compose, Docker Content Trust, Kubernetes, and the Credential Helper.</description></item><item><title>Connecting to Microcks API</title><link>https://microcks.io/documentation/guides/automation/api/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/automation/api/</guid><description>Overview This guide shows you how to authenticate to and how to use the Microcks API for better automation of tasks. As all the features available in Microcks can be used directly through its REST API, you can extend it we way you want and use it in a pure headless mode.
This guide takes place in 3 steps:
1Ô∏è‚É£ We will check your security configuration and see if authentication is required (it depends on how you deployed Microcks),</description></item><item><title>Enabling the AI Copilot</title><link>https://microcks.io/documentation/guides/integration/ai-copilot/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/integration/ai-copilot/</guid><description> ü™Ñ To Be Created
This is a new documentation page that has to be written as part of our Refactoring Effort.
Goal of this page
&amp;hellip;</description></item><item><title>Application Configuration</title><link>https://microcks.io/documentation/references/configuration/application-config/</link><pubDate>Mon, 29 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/configuration/application-config/</guid><description>Overview This page aims to give you a comprehensive reference on the configuration properties used within Microcks. These informations are the ideal companion of the Architecture &amp;amp; Deployment Options explanations and will be crucial for people who:
Want to install Microcks - providing info on what can be configured and what are the defaut values, Want to customize configurations - providing info on what can be used to provide customized Docker-Compose files, Want to develop or extend Microcks - providing comprehensive info on what&amp;rsquo;s externalized as properties and guidelines on how to extend.</description></item><item><title>What is Microcks?</title><link>https://microcks.io/documentation/overview/what-is-microcks/</link><pubDate>Mon, 29 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/overview/what-is-microcks/</guid><description>Microcks is a tool for mocking and testing your APIs and microservices. It leverages API standards to provide a uniform and multi-protocol approach for simulating complex distributed environments and validating service components in isolation.
Microcks facilitates rapid simulation generation, automated API testing, and seamless CI/CD integration, streamlining development and deployment processes. Microcks empowers teams to optimize services and accelerate product releases, gaining a competitive advantage.
Microcks is a Cloud Native Computing Foundation (CNCF) Sandbox project and a 100% Open Source and community driven initiative.</description></item><item><title>Organizing Repository</title><link>https://microcks.io/documentation/guides/administration/organizing-repository/</link><pubDate>Sun, 22 Mar 2020 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/guides/administration/organizing-repository/</guid><description>Overview This guide walks through the different techniques for organinzing your API &amp;amp; Services repository content in Microcks. As you import more and more artifacts into Microcks, it can be come difficult to find the API you&amp;rsquo;re looking for! Microcks proposes handling by putting labels üè∑Ô∏è on APIs &amp;amp; Services or Importer Jobs of your repository. Labels are a very flexible way to map your own organizational structures with loose coupling.</description></item><item><title>Importing Services &amp; APIs</title><link>https://microcks.io/documentation/guides/usage/importing-content/</link><pubDate>Wed, 26 Feb 2020 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/guides/usage/importing-content/</guid><description>Overview This guide will show you and discuss the different options for importing Services and APIs into Microcks. There is basically two different ways of putting new content into Microcks:
Pushing content to Microcks via Upload, Having Microcks pulling content via Importer. We will see the different ways of doing things as weel of the pros and cons of the different methods.
1. Import content via Upload Via the UI The most simple way of adding new Services or APIs mocks to your Microcks instance is by directly uploading the artifact.</description></item><item><title>Managing Users</title><link>https://microcks.io/documentation/guides/administration/users/</link><pubDate>Mon, 18 Nov 2019 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/guides/administration/users/</guid><description>Overview This guide will show you how to use the Users Management capabilities of the Microcks Web UI.
Your can partially manage users directly from the Microcks UI. &amp;ldquo;Partially&amp;rdquo; means that you are able to manage a user&amp;rsquo;s rolesand groups within Microcks but that you&amp;rsquo;re not able to create a new user. This action is reserved to your Identity Provider used through Keycloak configuration or to Keycloak itself if you choose to use it as a provider.</description></item><item><title>Microcks' OpenAPI</title><link>https://microcks.io/documentation/references/apis/open-api/</link><pubDate>Mon, 11 Nov 2019 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/references/apis/open-api/</guid><description>As a tool focused on APIs, Microcks also offers its own API that allows you to query its datastore and control the import jobs and configuration objects. You may use this API from your automation tool to dynamically launch new tests, register new mocks or globally control your Microcks server configuration.
The Swagger-UI below allows you to browse and discover the various API endpoints.
Previous releases of the API definitions can be found in the GitHub repository.</description></item><item><title>Getting started</title><link>https://microcks.io/documentation/tutorials/getting-started/</link><pubDate>Sun, 01 Sep 2019 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/tutorials/getting-started/</guid><description>Quickstart In this tutorial, you will discover Microcks mocking features by re-using a simple REST API sample. For that: you will run Microcks on your local machine, then load a sample provided by the Microcks team, explore the web user interface and then interact with an API mock.
The easiest way to get started with Microcks is using Docker or Podman with our ephemral all-in-one Microcks distribution.
In your terminal issue the following command - maybe replacing 8585 by another port of your choice if this one is not free:</description></item><item><title>AsyncAPI Conventions</title><link>https://microcks.io/documentation/references/artifacts/asyncapi-conventions/</link><pubDate>Mon, 27 May 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/artifacts/asyncapi-conventions/</guid><description>Conventions In addition of schema information, Microcks uses AsyncAPI Message Example Objects to produce example messages for mocking purpose.
For AsyncAPI 2.x document, the name attribute of example is mandatory so that Microcks reuses this name to identify available mock messages. Starting with AsyncAPI 3.0, the name is no longer mandatory and Microcks can then compute a name for you based on the message name and the index of example in the list.</description></item><item><title>Integrating with Microcks Hub</title><link>https://microcks.io/documentation/guides/integration/microcks-hub/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/integration/microcks-hub/</guid><description> ü™Ñ To Be Created
This is a new documentation page that has to be written as part of our Refactoring Effort.
Goal of this page
&amp;hellip;</description></item><item><title>Setting custom dispatcher</title><link>https://microcks.io/documentation/guides/usage/custom-dispatchers/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/usage/custom-dispatchers/</guid><description> ü™Ñ To Be Created
This is a new documentation page that has to be written as part of our Refactoring Effort.
Goal of this page
Load a sample API and explain on how to proceed via the UI Add x-microcks-operation attributes and re-load the API to check the effect Discuss the availability of API Metadata or API call to do that</description></item><item><title>Using Microcks CLI</title><link>https://microcks.io/documentation/guides/automation/cli/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/automation/cli/</guid><description>Overview This guide illustrates usage of microcks-cli, a command-line tool for interacting with Microcks APIs. It allows to launch tests or import API artifacts with minimal dependencies. It is managed and released independently of the core Microcks server components within its own GitHub repository. The CLI connects to API and uses Service Account and so it&amp;rsquo;s definitely worth the read üòâ
The CLI also supports authenticated and non-authenticated mode when Microcks is deployed without Keycloak.</description></item><item><title>With Docker Compose</title><link>https://microcks.io/documentation/guides/installation/docker-compose/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/installation/docker-compose/</guid><description>This guide shows you how to install and run Microcks using Docker Compose.
Docker Compose is a tool for easily testing and running multi-container applications. Microcks offers a simple way to set up the minimal required containers to have a functional environment on your local computer.
Usage To get started, make sure you have Docker installed on your system.
In your terminal issue the following commands:
Clone this repository. git clone https://github.</description></item><item><title>Main Concepts</title><link>https://microcks.io/documentation/overview/main-concepts/</link><pubDate>Mon, 29 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/overview/main-concepts/</guid><description>Before diving in, it is useful to briefly introduce or recall concepts or terminology we frequently use in the documentation.
Artifacts In Microcks, an Artifact is an asset that holds valuable information on how your API or microservices are expected to work. It is usually represented by a file on your local machine or in a remote version control system.
One of Microcks&amp;rsquo;s beauties is that it uses standard specifications or standard tooling files as Artifacts, allowing you to reuse existing assets.</description></item><item><title>Microcks' AsyncAPI</title><link>https://microcks.io/documentation/references/apis/async-api/</link><pubDate>Mon, 29 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/apis/async-api/</guid><description>As a tool focused on APIs and Events, Microcks also offers its own Events API that allows you subscribe to events produced by Microcks. Depending on your deployment topology, those events can be consumed directly via WebSockets or via a Kafka topic named microcks-services-updates.
The AsyncAPI Web Component below allows you to browse and discover the various API events.
Previous releases of the API definitions can be found in the GitHub repository.</description></item><item><title>Security Configuration</title><link>https://microcks.io/documentation/references/configuration/security-config/</link><pubDate>Mon, 29 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/configuration/security-config/</guid><description>Overview This page aims to give you a comprehensive reference on the configuration properties used within Microcks. These informations are the ideal companion of the Architecture &amp;amp; Deployment Options explanations and will be crucial for people who want to review the different security related capabilities of a deployment.
Network Using proxy for egress connections You can force the main Webapp component to use a corporate proxy for egress using the application.</description></item><item><title>Kafka, Avro &amp; Schema Registry</title><link>https://microcks.io/documentation/guides/usage/async-protocols/avro-messaging/</link><pubDate>Fri, 12 Feb 2021 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/guides/usage/async-protocols/avro-messaging/</guid><description>Overview This guide shows you how to use Microcks for mocking and testing Avro encoding on top of Apache Kafka. You&amp;rsquo;ll see how Microcks can speed-up the sharing of Avro schema to consumers using a Schema Registry and we will check how Microcks can detect drifts between expected Avro format and the one really used.
Microcks supports Avro as an encoding format for mocking and testing asynchronous and event-driven APIs through AsyncAPI.</description></item><item><title>Architecture &amp; deployment options</title><link>https://microcks.io/documentation/explanations/deployment-options/</link><pubDate>Tue, 15 Dec 2020 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/explanations/deployment-options/</guid><description>Introduction Microcks is a modular cloud-native application that can be deployed using many different installation methods. This documentation gives you details on internal components and exposes the different options for deploying them. It also discuss the pros and cons of those different options and the target usage they&amp;rsquo;re addressing.
Complete Logical Architecture In its most comprehensive form, Microcks architecture is made of components which are:
The Microcks main web application (also called webapp) that holds the UI resources as well as API endpoints, Its associated MongoDB database for holding your data such as the repository of APIs | Services and Tests, The Microcks Postman runtime (microcks-postman-runtime) that allows the execution of Postman Collection tests and calls back Microcks for storing results, An Apache Kafka broker that holds our private topic for changes and the public topics that will be used to publish mock messages by the microcks-async-minion.</description></item><item><title>Getting started with Tests</title><link>https://microcks.io/documentation/tutorials/getting-started-tests/</link><pubDate>Mon, 19 Oct 2020 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/tutorials/getting-started-tests/</guid><description>Quickstart (continue) with Tests Now that you have finished the Getting started guide, you should have a Microcks installation up-and-running and filled with some samples from the Microcks repository. The goal of this page is to show you how you can use Microcks to achieve Contract Testing for your API, either manually from the UI or in an automated way using the Microcks CLI tooling.
If you have not done it in the previous step, you will need to load one of Microcks samples: the Pastry API - 2.</description></item><item><title>Mock Templates</title><link>https://microcks.io/documentation/references/templates/</link><pubDate>Tue, 11 Feb 2020 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/references/templates/</guid><description>Introduction This page contains the comprehensive lists of variables and functions that can be used to genete dynamic mock content in Microcks.
There is 3 different kinds of expressions that can be used to generate dynamic content in mocks when included into the {{ }} expression marker:
Variables Reference Expressions allow reusing elements from an incoming request, accessed from variables, Context Expressions allow reusing elements from the request processing context, Function Expressions allow generating dynamic data using helper functions.</description></item><item><title>Applying constraints to mocks</title><link>https://microcks.io/documentation/guides/usage/mocks-constraints/</link><pubDate>Tue, 18 Jun 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/usage/mocks-constraints/</guid><description>Overview Sometimes it may be required to specify additional constraints onto a mock operation. Constraints that are related to API behaviour or semantic may be hard even impossible to express with an API contract. Microcks allows you to specify such constraints by editing the properties of a Service or API operation.
This guide will introduce you the concepts of Microcks parameters constraints that allows you to customize the behavior and the validation of your mocks.</description></item><item><title>Swagger Conventions</title><link>https://microcks.io/documentation/references/artifacts/swagger-conventions/</link><pubDate>Mon, 27 May 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/artifacts/swagger-conventions/</guid><description>Microcks is supporting Swagger mocking and testing thanks to multi-artifacts support feature. In order to use Swagger in Microcks, you will need 2 artifacts for each API definition:
A Swagger definition that holds the API metadata and operations definitions, A Postman Collection file that holds the mock examples (requests and responses) for the different operations of the API. Conventions In order to be correctly imported and understood by Microcks, your Postman file should follow a little set of reasonable conventions and best practices.</description></item><item><title>Configuring the Backstage Plugin</title><link>https://microcks.io/documentation/guides/integration/backstage-plugin/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/integration/backstage-plugin/</guid><description> ü™Ñ To Be Created
This is a new documentation page that has to be written as part of our Refactoring Effort.
Goal of this page
&amp;hellip;</description></item><item><title>With Podman Compose</title><link>https://microcks.io/documentation/guides/installation/podman-compose/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/installation/podman-compose/</guid><description>This guide shows you how to install and run Microcks using Docker Compose.
Podman Compose is a tool for easily testing and running multi-container applications. Microcks offers a simple way to set up the minimal required containers to have a functional environment on your local computer. This procedure has been successfully tested with Podman 2.1.1 onto Fedora 33+ and should be OK on CentOS Stream 8+ and RHEL 8+ distributions too.</description></item><item><title>Your 1st REST mock</title><link>https://microcks.io/documentation/tutorials/first-rest-mock/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/tutorials/first-rest-mock/</guid><description>Overview This tutorial is a step-by-step walkthrough on how to use OpenAPI v3 Specification to specify your mocks for your API. This is hands-on introduction to OpenAPI Conventions reference that brings all details on conventions being used.
We will go through a practical example based on the famous PetStore API. We&amp;rsquo;ll build the reference petstore-1.0.0-openapi.yaml file by iterations, highlighting the details to get you starting with mocking OpenAPI on Microcks.</description></item><item><title>Helm Chart Parameters</title><link>https://microcks.io/documentation/references/configuration/helm-chart-config/</link><pubDate>Mon, 29 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/configuration/helm-chart-config/</guid><description>Introduction One easy way of installing Microcks is via a Helm Chart. Kubernetes version 1.17 or greater is required. It is assumed that you have some kind of Kubernetes cluster up and running available. This can take several forms depending on your environment and needs:
Lightweight Minikube on your laptop, see Minikube project page, A Google Cloud Engine account in the cloud, see how to start a Free trial, Any other Kubernetes distribution provider.</description></item><item><title>Using in GitHub Actions</title><link>https://microcks.io/documentation/guides/automation/github-actions/</link><pubDate>Fri, 19 Feb 2021 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/guides/automation/github-actions/</guid><description>Overview This guide shows you how to integrate Microcks into your Github Actions workflows. Microcks provides 2 GitHub Actions for interacting with a Microcks instance from your workflows:
The Microcks Import GitHub Action allows you to import Artifacts in a Microcks instance. If import succeeds is pursuing, if not it fails,
The Microcks Test GitHub Action allows you to launch a Microcks test on a deployed API endpoint. If test succeeds (ie.</description></item><item><title>MQTT Mocking &amp; Testing</title><link>https://microcks.io/documentation/guides/usage/async-protocols/mqtt-support/</link><pubDate>Mon, 15 Feb 2021 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/guides/usage/async-protocols/mqtt-support/</guid><description>Overview This guide shows you how to use the Message Queuing Telemetry Transport (MQTT) protocol with Microcks. MQTT is a standard messaging protocol for the Internet of Things (IoT). It is used today in a wide variety of industries, such as automotive, manufacturing, telecommunications, oil and gas, etc.
Microcks supports MQTT as a protocol binding for AsyncAPI. That means that Microcks is able to connect to a MQTT broker for publishing mock messages as soon as it receives a valid AsyncAPI Specification and to connect to any MQTT broker in your organization to check that flowing messages are compliant to the schema described within your specification.</description></item><item><title>Accessing secured Resources</title><link>https://microcks.io/documentation/guides/administration/secrets/</link><pubDate>Mon, 18 Nov 2019 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/guides/administration/secrets/</guid><description>Overview Quickly after your initial experience with Microcks, you&amp;rsquo;ll realize that it needs to access some of your private resources for smooth integration in your lifecycle. Typically:
Loading Artifacts may require accessing secured external resources such as Git repositories, Launching tests may require accessing protected HTTPS endpoints or internal message brokers. This guide will explain you what is the concept of Secret in Microcks, how to manage those Secrets and how to use them when defining an Importer Job.</description></item><item><title>Configuring stateful mocks</title><link>https://microcks.io/documentation/guides/usage/stateful-mocks/</link><pubDate>Mon, 29 Jul 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/usage/stateful-mocks/</guid><description>Overview Microcks allows to specifiy dynamic mock content using expressions since the early days. Most of the time, those features help in translating the dynamic behaviour of an API and provide meaningful simulations. However, you may need sometime to provide even more realistic behaviour and that&amp;rsquo;s where stateful mocks may be of interest.
üí° Stateful mocks are available starting with Microcks 1.10.0.
In this guide, we&amp;rsquo;ll go through the different concepts that are used and useful when wanting to configure statful mocks with Microcks.</description></item><item><title>Alternatives</title><link>https://microcks.io/documentation/overview/alternatives/</link><pubDate>Tue, 18 Jun 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/overview/alternatives/</guid><description>Comparison with alternatives is always a tough question ü§î
Please check this neutral Wikipedia page for more inisghts: Comparison of API simulation tools
If you would like a more opinionated description on &amp;ldquo;How Microcks compares to Pact for Contract Testing?&amp;rdquo;, you may want to read this Medium blog post by one of the project co-founder: Microcks and Pact for API contract testing.
Finally, if you&amp;rsquo;re wondering why we think Microcks is unique in terms of Development Lifecycle coverage, you may check How Microcks fit and unify Inner and Outer Loops for cloud-native development the other co-founder of the project.</description></item><item><title>GraphQL Conventions</title><link>https://microcks.io/documentation/references/artifacts/graphql-conventions/</link><pubDate>Mon, 27 May 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/artifacts/graphql-conventions/</guid><description>In order to use GraphQL in Microcks, you will need two artifacts for each API definition as explained in Multi-artifacts support:
A GraphQL IDL Schema definition that holds the API metadata and operations definitions, A Postman Collection file that holds the mock examples (requests and responses) for the different operations of the GraphQL API. Conventions In order to be correctly imported and understood by Microcks, your GraphQL IDL and Postman files should follow a little set of reasonable conventions and best practices.</description></item><item><title>On Kind with Helm</title><link>https://microcks.io/documentation/guides/installation/kind-helm/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/installation/kind-helm/</guid><description>Overview This guide will walk you through the different steps of running a full Microcks installation on your laptop using Kind. The step #4 is actually optional and may only be of interest if you&amp;rsquo;d like to use Asynchronous features of Microcks.
The installation notes were ran on an Apple Mac book M2 but those steps would sensibly be the same on any Linux machine.
Let&amp;rsquo;s go üöÄ
1. Preparation As being on a Mac, people usually use brew to install kind.</description></item><item><title>Your 1st GraphQL mock</title><link>https://microcks.io/documentation/tutorials/first-graphql-mock/</link><pubDate>Wed, 03 Jul 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/tutorials/first-graphql-mock/</guid><description>Overview This tutorial is a step-by-step walkthrough on how to use GraphQL schemas to get mocks for your GraphQL API. This is hands-on introduction to GraphQL Conventions reference that brings all details on conventions being used.
We will go through a practical example based on the famous PetStore API. We‚Äôll build the reference petstore-1.0.graphql file by iterations, highlighting the details to get you starting with mocking GraphQL on Microcks.
To complete this tutorial, you will need one additional tool: Postman to define sample data that will be used by your mocks.</description></item><item><title>Your 1st gRPC mock</title><link>https://microcks.io/documentation/tutorials/first-grpc-mock/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/tutorials/first-grpc-mock/</guid><description>Overview This tutorial is a step-by-step walkthrough on how to use a gRPC / Protocol Buffers specification to get mocks for your gRPC Service. This is hands-on introduction to gRPC Conventions reference that brings all details on conventions being used.
We will go through a practical example based on the famous PetStore API. We‚Äôll build the reference petstore-v1.proto file by iterations, highlighting the details to get you starting with mocking gRPC on Microcks.</description></item><item><title>Operator Configuration</title><link>https://microcks.io/documentation/references/configuration/operator-config/</link><pubDate>Mon, 29 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/configuration/operator-config/</guid><description>Introduction Operators are next-gen installer, maintainer and life-cycle manager for Kubernetes native applications. Operators are a Kubernetes native piece of software (aka Kube controller) that manages specific Custom Resources defining their domain of expertise. Microcks provide an Operator that was developed using the Operator Framework SDK and that is distributed via OperatorHub.io.
Microcks project currently proposes two operator with different maturity:
The Ansible-based Operator is the legacy one. It is production release and currently distributed via OperatorHub.</description></item><item><title>Test Parameters</title><link>https://microcks.io/documentation/references/test-endpoints/</link><pubDate>Mon, 29 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/test-endpoints/</guid><description>Introduction From the page displaying basic information on your API or Service mocks, you have the ability to launch new tests against different endpoints that may be representing different environment into your development process. Hitting the NEW TEST&amp;hellip; button, leads you to the following form where you will be able to specify a target URL for the test, as well as a Runner‚Äîa testing strategy for your new launch:
This reference documentation walks you through the different parameters available when launching a new test on Microcks.</description></item><item><title>RabbitMQ Mocking &amp; Testing</title><link>https://microcks.io/documentation/guides/usage/async-protocols/rabbitmq-support/</link><pubDate>Tue, 22 Nov 2022 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/guides/usage/async-protocols/rabbitmq-support/</guid><description>Overview This guide shows you how to use the RabbitMQ protocol with Microcks. RabbitMQ is one of the most popular open source message broker that is supporting different protocols and more specifically AMQP 0.9.1, RabbitMQ was originally developed for.
Microcks supports RabbitMQ/AMQP as a protocol binding for AsyncAPI. That means that Microcks is able to connect to a RabbitMQ broker for publishing mock messages as soon as it receives a valid AsyncAPI Specification and to connect to any RabbitMQ broker in your organization to check that flowing messages are compliant to the schema described within your specification.</description></item><item><title>Snapshotting/restoring Repository</title><link>https://microcks.io/documentation/guides/administration/snapshots/</link><pubDate>Mon, 18 Nov 2019 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/guides/administration/snapshots/</guid><description>Overview This guide will teach you what are Microcks Snapshots and what are their use-case sweet spots. As an administrator, you will learn how to select the elements you would like to Snapshots and how to import a previous Snapshot to restore content.
üö® Prerequisites
Users can only be managed by Microcks admin - we mean people having the admin role assigned. In order to be able to retrieve the list of users and operate changes, the user should also have manage-users and manage-clients roles from realm-management Keycloak internal client.</description></item><item><title>gRPC Conventions</title><link>https://microcks.io/documentation/references/artifacts/grpc-conventions/</link><pubDate>Mon, 27 May 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/artifacts/grpc-conventions/</guid><description>In order to use gRPC in Microcks, you will need two artifacts for each service definition as explained in Multi-artifacts support:
A gRPC / Protocol Buffers file definition that holds the Service metadata and operations definitions, A Postman Collection file that holds the mock examples (requests and responses) for the different operations of the gRPC Service. Conventions In order to be correctly imported and understood by Microcks, your gRPC and Postman files should follow a little set of reasonable conventions and best practices.</description></item><item><title>API Metadata Format</title><link>https://microcks.io/documentation/references/metadada/</link><pubDate>Thu, 16 May 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/metadada/</guid><description>Introduction Some Microcks mocks specific metadata or properties cannot be fully deduced from common attributes coming from OpenAPI or AsyncAPI. Thus we should rely on default values can be later overwritten by manager within Microcks either using the UI or through the Microcks API.
üí° For OpenAPI and AsyncAPI, we introduced OpenAPI extensions and AsyncAPI extensions to allow providing this informations using x-microcks properties.
But sometimes you don&amp;rsquo;t want to add some x-microcks extensions attributes into AsyncAPI / OpenAPI document OR you&amp;rsquo;d need to specify these metadata and properties for some other artifact types like Protobuf + Postman Collection for GRPC mocking for instance üòâ.</description></item><item><title>On Minikube with Helm</title><link>https://microcks.io/documentation/guides/installation/minikube-helm/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/installation/minikube-helm/</guid><description>Overview This guide will walk you through the different steps of running a full Microcks installation on your laptop using Minikube. The step #4 is actually optional and may only be of interest if you&amp;rsquo;d like to use Asynchronous features of Microcks.
The installation notes were ran on an Apple Mac book M2 but those steps would sensibly be the same on any Linux machine.
Let&amp;rsquo;s go üöÄ
1. Preparation As being on a Mac, people usually use brew to install minikube.</description></item><item><title>Your 1st Soap mock</title><link>https://microcks.io/documentation/tutorials/first-soap-mock/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/tutorials/first-soap-mock/</guid><description>Overview This tutorial is a step-by-step walkthrough on how to use SoapUI projects to get mocks for your SOAP WebService. This is hands-on introduction to SoapUI Conventions reference that brings all details on conventions being used.
We will go through a practical example based on the famous PetStore API. We‚Äôll build the reference petstore-1.0-soapui-project.xml file by iterations, highlighting the details to get you starting with mocking SOAP WebServices on Microcks.</description></item><item><title>NATS Mocking &amp; Testing</title><link>https://microcks.io/documentation/guides/usage/async-protocols/nats-support/</link><pubDate>Mon, 30 Jan 2023 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/guides/usage/async-protocols/nats-support/</guid><description>Overview This guide shows you how to use a NATS protocol with Microcks. NATS is a Cloud Native, Open Source and High-performance Messaging technology. It is a single technology that enables applications to securely communicate across any combination of cloud vendors, on-premise, edge, web and mobile, and devices. Client APIs are provided in over 40 languages and frameworks and you can check out the full list of clients.
Microcks supports NATS as a protocol binding for AsyncAPI.</description></item><item><title>Generating Direct API</title><link>https://microcks.io/documentation/guides/usage/direct-api/</link><pubDate>Sun, 01 Sep 2019 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/usage/direct-api/</guid><description>Overview Eventhough Microcks promotes a contract first approach for defining mocks, in real-life it may be difficult starting that way without a great maturity on API and Service contracts. You often need to play a bit with a fake API to really figure out their needs and how you should then design API contract. In order to help with this situation, Microcks offers the ability to directly generate an API that you may use as a sandbox.</description></item><item><title>API Examples Format</title><link>https://microcks.io/documentation/references/examples/</link><pubDate>Fri, 26 Jul 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/examples/</guid><description>Introduction APIExamples format is Microcks&amp;rsquo; own specification format for defining examples intented to be used by Microcks mocks. It can be seen as a lightweight, general purpose specification to solely serve the need to provide mock datasets. The goal of this specification is to keep the Microcks adoption curve very smooth with development teams but also for non developers.
üí° APIExamples artifacts are supported starting with Microcks 1.10.0.
APIExamples files are simple YAML and aim to be very easy to understand and edit.</description></item><item><title>Postman Conventions</title><link>https://microcks.io/documentation/references/artifacts/postman-conventions/</link><pubDate>Mon, 27 May 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/artifacts/postman-conventions/</guid><description>Conventions In order to be correctly imported and understood by Microcks, your Postman Collection should follow a little set of reasonable conventions and best practices.
Your Postman collection may contain one or more API definitions. However, because it&amp;rsquo;s a best practice to consider each API as an autonomous and isolated software asset, we&amp;rsquo;d recommend managing only one API definition per Postman collection and not mixing requests related to different APIs within the same Collection, Your Postman collection description should hold a custom property named version that allows tracking of API version.</description></item><item><title>Developing with Testcontainers</title><link>https://microcks.io/documentation/guides/usage/developing-testcontainers/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/usage/developing-testcontainers/</guid><description>Overview This guide will provide you with pointers on how to embed Microcks into your unit tests with the help of Testcontainers. The project now provides official modules for Testcontainers via a partenership with AtomicJar, the company behind this fantastic library!
You‚Äôll learn how to automatically launch and shut down Microcks‚Äô instances so that you can easily test your API clients and API contracts. You can find information on the official module on Testcontainers Microcks page.</description></item><item><title>Your 1st AsyncAPI on Kafka mock</title><link>https://microcks.io/documentation/tutorials/first-asyncapi-mock/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/tutorials/first-asyncapi-mock/</guid><description>Overview This tutorial is a step-by-step walkthrough on how to use AsyncAPI v3 Specification to specify your mocks for your Asynchronous and Event-Driven API. This is hands-on introduction to AsyncAPI Conventions reference that brings all details on conventions being used.
We will go through a practical example based on the famous PetStore API. We‚Äôll build the reference petstore-1.0.0-asyncapi.yaml file by iterations, highlighting the details to get you starting with mocking AsyncAPI on Microcks.</description></item><item><title>Pub/Sub Mocking &amp; Testing</title><link>https://microcks.io/documentation/guides/usage/async-protocols/googlepubsub-support/</link><pubDate>Wed, 08 Feb 2023 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/guides/usage/async-protocols/googlepubsub-support/</guid><description>Overview This guide shows you how to use a Google Pub/Sub messaging service with Microcks. Pub/Sub is an asynchronous and scalable messaging service that decouples services producing messages from services processing those messages. Pub/Sub allows services to communicate asynchronously, with latencies on the order of 100 milliseconds.
Microcks supports Google Pub/Sub as a protocol binding for AsyncAPI. That means that Microcks is able to connect to a Google Pub/Sub service for publishing mock messages as soon as it receives a valid AsyncAPI Specification and to connect to any Google Pub/Sub broker provided that Google Cloud Platform to check that flowing messages are compliant to the schema described within your specification.</description></item><item><title>Using in Jenkins Pipeline</title><link>https://microcks.io/documentation/guides/automation/jenkins/</link><pubDate>Fri, 19 Feb 2021 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/guides/automation/jenkins/</guid><description>Overview This guide illustrates how you can integrate the Microcks Jenkins plugin keep Microcks in-sync withe your API specifications and integrate tests stages within your Jenkins CI/CD pipelines. This plugin allows your Jenkins builds and jobs to import API Artifacts into a Microcks instance and to launch new Tests. It uses Service Account and so it&amp;rsquo;s definitely worth the read üòâ
The Microcks Jenkins plugin has its own GitHub repository and its own lifecycle.</description></item><item><title>SoapUI Conventions</title><link>https://microcks.io/documentation/references/artifacts/soapui-conventions/</link><pubDate>Mon, 27 May 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/artifacts/soapui-conventions/</guid><description>Conventions In order to be correctly imported and understood by Microcks, your SoapUI project should follow a little set of reasonable conventions and best practices.
Your SoapUI project may contain one or more Service definitions. However, because it&amp;rsquo;s a best practice to consider each Service or API as an autonomous and isolated software asset, we&amp;rsquo;d recommend managing only one Service definition per SoapUI project, Your SoapUI Mock Service should define a custom property named version that allows tracking of Service(s) version.</description></item><item><title>SQS/SNS Mocking &amp; Testing</title><link>https://microcks.io/documentation/guides/usage/async-protocols/aws-sqs-sns-support/</link><pubDate>Tue, 06 Jun 2023 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/usage/async-protocols/aws-sqs-sns-support/</guid><description>Overview This guide shows you how to use a Amazon SQS and Amazon SNS messaging services with Microcks. As those two services are very frequently used in combination, we decided to cover both of them in the same guide as principles and configuration are very similar. However, Microcks may provide mocking and testing services for SQS only and mocking and testing services for SNS only. You don&amp;rsquo;t have to use both to benefit from Microcks features.</description></item><item><title>Using in GitLab CI</title><link>https://microcks.io/documentation/guides/automation/gitlab/</link><pubDate>Mon, 11 Nov 2019 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/guides/automation/gitlab/</guid><description/></item><item><title>Http Archive Conventions</title><link>https://microcks.io/documentation/references/artifacts/har-conventions/</link><pubDate>Mon, 27 May 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/artifacts/har-conventions/</guid><description>Conventions In order to be correctly imported and understood by Microcks, your HAR file should follow a little set of reasonable conventions and best practices.
HAR file doesn&amp;rsquo;t have the notion of API name or version. In Microcks, this notion is critical and we thus we will need to have a specific comment notation to get this information. You&amp;rsquo;ll need to add a comment line starting with microcksId: in your file and then referring the &amp;lt;API name&amp;gt;:&amp;lt;API version&amp;gt;.</description></item><item><title>Multi-artifacts support</title><link>https://microcks.io/documentation/explanations/multi-artifacts/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/explanations/multi-artifacts/</guid><description>Introduction Microcks can have multiple artifacts (one primary and many secondary) mapping to one API definition. The primary one will bring API or Service and operation metadata and examples. The secondary ones will only enrich existing operations with new non-conflicting requests/responses and event samples.
A typical illustration of this may be using an OpenAPI specification as a primary one and then bringing one (or many) additional Postman collections to provide examples or test constraints.</description></item><item><title>Connecting to Postman Workspaces</title><link>https://microcks.io/documentation/guides/integration/postman-workspace/</link><pubDate>Tue, 18 Jun 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/integration/postman-workspace/</guid><description>Overview Postman Workspaces are a common and effective way of organizing your team API work. Workspaces allow you to collaborate while designing your API and share your API artifacts like Postman Collections.
In this guide, you&amp;rsquo;ll learn how to directly connect Microcks to your Postman Collection living in a Workspace so that changes in Postman may be automatically propagated to Microcks.
1. Obtain an API Key In order to connect to your Postman Workspace, you&amp;rsquo;ll need an API Access Key so that Microcks will be able to authenticate while fetching your Collection.</description></item><item><title>Dynamic mock content</title><link>https://microcks.io/documentation/explanations/dynamic-content/</link><pubDate>Tue, 11 Feb 2020 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/explanations/dynamic-content/</guid><description>Introduction Whilst we deeply think that &amp;ldquo;real-world&amp;rdquo; static values for request/response samples are crucial in order to fully understand the business usages and expectations of an API, we have to admit that it is more than often useful to introduce some kind of dynamically generated content for response.
Those use-case encompass:
random numbers that may be defined in a range, today&amp;rsquo;s date or today&amp;rsquo;s + an amount of time (for validity date for example), response part expressed from request part (body part, header, query param) Thus, Microcks has some templating features allowing to specify dynamic parts in response content.</description></item><item><title>Using in Tekton Pipeline</title><link>https://microcks.io/documentation/guides/automation/tekton/</link><pubDate>Mon, 11 Nov 2019 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/guides/automation/tekton/</guid><description>Overview This guide shows you how to integrate Microcks into your Tekton Pipelines. Microcks provides 2 Tekton Tasks for interacting with a Microcks instance. They allow you to:
Import Artifacts in a Microcks instance. If import succeeds is pursuing, if not it fails, Launch a test on a deployed API endpoint. If test succeeds (ie. API endpoint is conformant with API contract in Microcks) the workflow is pursuing, if not it fails.</description></item><item><title>On Kubernetes with Operator</title><link>https://microcks.io/documentation/guides/installation/kubernetes-operator/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/installation/kubernetes-operator/</guid><description>Overview This guide shows you how to deploy and use the Microcks Kubernetes Operator. If you&amp;rsquo;re not familiar with Operators, we recommend having a read of this excellent introduction on Kubernetes Operators and their benefits.
The Microcks Operator offers advanced features comparing to the Helm chart and can be used in a complete GitOps approach where all the content of a Microcks instance can be pulled from a Git repository. Deploying this practice will allow the automated creation of fully-configured instances on demand, in seconds or minutes, and in a full reproducible way.</description></item><item><title>Conformance testing</title><link>https://microcks.io/documentation/explanations/conformance-testing/</link><pubDate>Tue, 15 Dec 2020 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/explanations/conformance-testing/</guid><description>Introduction It is likely you experienced the painful situation of deploying to production only to find out that an API or Services you integrate with has broken its contract. How can we effectively ensure this does not happen?
As introduced in Main Concepts, Microcks can be used for Contract conformance testing of API or services being under development. You spend a lot of time describing request/response pairs and matching rules: it would be a shame not to use this sample as test cases once the development is on its way!</description></item><item><title>Service accounts</title><link>https://microcks.io/documentation/explanations/service-account/</link><pubDate>Sun, 01 Sep 2019 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/explanations/service-account/</guid><description>Introduction Microcks is using OpenId Connect and OAuth 2.0 bearer tokens to secure its frontend and API access. While this is very convenient for interactive users, it may be unpracticable for machine-to-machine authentication when you want to interact with Microcks from a robot, CI/CD pipeline or simple CLI tool. For that, we decided to implement the simple OAuth 2.0 Client Credentials Grant in addition of other grants. This authentication is implemented using Service Accounts clients defined into the Realm configuration in Keycloak.</description></item><item><title>Dispatcher &amp; dispatching rules</title><link>https://microcks.io/documentation/explanations/dispatching/</link><pubDate>Tue, 03 Mar 2020 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/explanations/dispatching/</guid><description>Introduction In order to provide smart mocks, Microcks is using Dispatcher and Dispatching Rules to find the most appropriate response to return when receiving a request.
The Dispatcher is defining a routing logic for mocks, that specifies the kind of elements of an incoming request will be examined to find a match. The Dispatcher Rules refines those elements as well as the matching rule to find the correct response.
By default, Microcks looks at the variable parts between the different examples of the same operation when importing a new Service or API and infers those two elements.</description></item><item><title>Adding external dependencies</title><link>https://microcks.io/documentation/guides/installation/externals/</link><pubDate>Thu, 26 Oct 2023 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/installation/externals/</guid><description>Overview This guide is a walkthrough, that exposes Microcks extension capabilities and explain how to leverage them. By the end of this tour, you should be able to apply your customizations and figure out the possibilities it offers.
üí° This guide is actually an adaptation of the excellent CNAM&amp;rsquo;s blog post here: Extend Microcks with custom libs and code that provides comprehensive samples on how to apply the below principles.</description></item><item><title>Monitoring &amp; Observability</title><link>https://microcks.io/documentation/explanations/monitoring/</link><pubDate>Fri, 09 Sep 2022 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/explanations/monitoring/</guid><description>Introduction As a cloud-native application, we take great care of providing observability on what&amp;rsquo;s going on within a Microcks instance. We dissociate two kinds of metrics: the Functional metrics are related to all the domain objects you may find in Microcks and the Technical metrics that are related to resource consumption and performance.
Functional metrics Microcks provides functional metrics directly from within its own REST API. This API will give you visibility on how you use the platform to invoke mocks, execute tests and enhance or degrade quality metrics.</description></item><item><title>Microcks 1.11.0 release üöÄ</title><link>https://microcks.io/blog/microcks-1.11.0-release/</link><pubDate>Wed, 22 Jan 2025 00:00:00 +0100</pubDate><guid>https://microcks.io/blog/microcks-1.11.0-release/</guid><description>Start fresh this New Year and welcome the 1.11.0 release of Microcks, the CNCF‚Äôs open-source cloud-native API Mocking and Testing tool!
With over 60 resolved issues and 12 contributors, this is one of the biggest releases! Kudos to all the people üëè who helped along the way by writing code, commenting on issues, or writing posts. Check our greetings and notes below.
This release had no specific theme at the beginning but reviewing the content, we realized it was mainly about validation &amp;amp; traceability:</description></item><item><title>Announcing Testcontainers Modules 0.3</title><link>https://microcks.io/blog/testcontainers-modules-0.3/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0100</pubDate><guid>https://microcks.io/blog/testcontainers-modules-0.3/</guid><description>To start the 2025 Year fresh, we&amp;rsquo;re delighted to announce the release of the new series of our Testcontainers Modules üßä! Microcks modules are language-specific libraries that enable embedding Microcks into your unit tests with lightweight, throwaway instances thanks to containers.
The 0.3 series is a major step forward that completes the set of features and elevates Microcks as a fully featured mocking library for development purposes. It can be used with different testing styles (classicist, mockist, state-based, and interaction-based) and provides features for all major languages and all kinds of API!</description></item><item><title>Recap of an Amazing 2024, and ready to go for 2025!</title><link>https://microcks.io/blog/recap-of-an-amazing-2024/</link><pubDate>Mon, 13 Jan 2025 00:00:00 +0100</pubDate><guid>https://microcks.io/blog/recap-of-an-amazing-2024/</guid><description>As we wrap up 2024, we at Microcks want to express our gratitude to our adopters, sponsors, partners, and community members. Your unwavering support and engagement have been the foundation of our success, making this year nothing short of remarkable. We&amp;rsquo;ve achieved significant milestones such as more community implication, stronger ecosystem collaboration, and significant communication contributions and amplification from our members.
This year has been transformative, marked by growth, innovation, and a sense of community that fuels our journey.</description></item><item><title>Revolutionizing API Strategy: Lombard Odier's Success Story with Microcks</title><link>https://microcks.io/blog/lombard-odier-revolutionizing-api-strategy/</link><pubDate>Tue, 10 Dec 2024 00:00:00 +0100</pubDate><guid>https://microcks.io/blog/lombard-odier-revolutionizing-api-strategy/</guid><description>Lombard Odier is a global wealth and asset manager. For over 225 years and through more than 40 financial crises, the Group has aligned itself with the long-term interests of private and institutional clients. It has a strong balance sheet with a CET1 ratio of 31.7% and a Fitch rating of AA-, the highest possible rating for a bank of its size.
Structured as an independent partnership, Lombard Odier is solely owned by its Managing Partners.</description></item><item><title>Microcks 1.10.0 release üöÄ</title><link>https://microcks.io/blog/microcks-1.10.0-release/</link><pubDate>Wed, 07 Aug 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/microcks-1.10.0-release/</guid><description>We are excited to announce today the 1.10.0 release of Microcks, the CNCF&amp;rsquo;s open-source cloud-native tool for API Mocking and Testing, ready for summer ‚òÄÔ∏è vacations! üöÄ
For this release, we received help from 4 new code committers and dozens of others who opened, contributed, and reviewed 46 issues. Most of them are adopters! Kudos to all of them üëè and see greetings along the notes below.
1.10.0 release brings you a wave of new features, including Stateful mocks support, a new lightweight API Examples specification format, tons of enhancements in the Uber and Native distributions, and a big refresh on installation dependencies.</description></item><item><title>A Thriving year in the CNCF Sandbox and Its Transformative Impacts</title><link>https://microcks.io/blog/microcks-a-thriving-year-in-the-cncf-sandbox/</link><pubDate>Mon, 24 Jun 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/microcks-a-thriving-year-in-the-cncf-sandbox/</guid><description>In the ever-evolving landscape of open-source software, achieving recognition and support from reputable foundations can be a game-changer for projects. This was precisely the case for Microcks, an innovative API mocking and testing project. When Microcks joined the CNCF (Cloud Native Computing Foundation) Sandbox a year ago, opportunities opened. In this blog post, we&amp;rsquo;ll delve into Microcks&amp;rsquo;s exciting journey as it embraced its CNCF Sandbox status and explore the profound positive impacts the project experienced in its first year within the foundation.</description></item><item><title>CNAM Partners with Microcks for Automated SOAP Service Mocking</title><link>https://microcks.io/blog/cnam-soap-service-mocking/</link><pubDate>Mon, 03 Jun 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/cnam-soap-service-mocking/</guid><description>With over 2,500 employees, the Caisse Nationale de l‚ÄôAssurance Maladie CNAM is the operational &amp;ldquo;headquarters&amp;rdquo; of France&amp;rsquo;s compulsory health insurance system. We play a pivotal role in ensuring access to healthcare for all French citizens, overseeing and funding health insurance coverage for employees and their families.
Additionally, we coordinate with and assist the local organizations within our network, which consists of 164 entities deployed nationally, regionally, and locally throughout France. We rely on SOAP (Simple Object Access Protocol) for our historical and mission-critical legacy systems to facilitate seamless information exchange among these organizations.</description></item><item><title>Microcks 1.9.1 release üöÄ</title><link>https://microcks.io/blog/microcks-1.9.1-release/</link><pubDate>Thu, 23 May 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/microcks-1.9.1-release/</guid><description>Just two months after the previous release, we are thrilled to announce this brand-new Microcks version! Please welcome the 1.9.1 release of Microcks, the Open-source cloud-native tool for API Mocking and Testing üôå
With no less than 30 newly resolved issues, this release is special as it is the first to have so many issues directly contributed by community users! 25 evolutions out of 30 directly come from them! Kudos to our community üëè, and see greetings along the notes below.</description></item><item><title>Introducing new Proxy features in Microcks 1.9.1</title><link>https://microcks.io/blog/new-proxy-features-1.9.1/</link><pubDate>Mon, 13 May 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/new-proxy-features-1.9.1/</guid><description>We all know about the many benefits of Microcks, which makes it an excellent tool for the software development process. When I first started using it, everything went smoothly. However, there is no limit to QA&amp;rsquo;s expectations üòä
Recently, a quality assurance specialist approached me with a request: &amp;ldquo;The mocks work fine, but we need to implement a new testing scenario. Every third or random response should be a mock-up, while the rest should be from the actual service&amp;hellip;&amp;rdquo;</description></item><item><title>Mocking OpenID Connect redirect</title><link>https://microcks.io/blog/mocking-oidc-redirect/</link><pubDate>Wed, 24 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/mocking-oidc-redirect/</guid><description>A few days ago, I worked on a new prototype to see what it means to use Microcks to mock OpenID Connect authentication flows. As Zero-trust security model is now the norm in this cloud and distributed computing era, developers must integrate this from the beginning of their application development. However, accessing an Identity Provider (IDP) is not always convenient depending on your working situation - thinking of remote access, disconnected place, stateful provider inconsistencies, etc.</description></item><item><title>Microcks 1.9.0 release üöÄ</title><link>https://microcks.io/blog/microcks-1.9.0-release/</link><pubDate>Thu, 14 Mar 2024 00:00:00 +0100</pubDate><guid>https://microcks.io/blog/microcks-1.9.0-release/</guid><description>This has been a busy week just before KubeCon EU, but we are delighted to announce the 1.9.0 release of Microcks, the CNCF&amp;rsquo;s open-source cloud-native tool for API Mocking and Testing,
We received help from 6 different external code committers and dozens of others who opened and reviewed issues and contributed ideas or blog posts. Most of them are adopters! Kudos to all of them üëè and see greetings along the notes below.</description></item><item><title>Observability for Microcks at scale</title><link>https://microcks.io/blog/observability-for-microcks-at-scale/</link><pubDate>Tue, 12 Mar 2024 00:00:00 +0100</pubDate><guid>https://microcks.io/blog/observability-for-microcks-at-scale/</guid><description>As part of the upcoming 1.9.0 release of Microcks, I‚Äôm super proud to have contributed new features related to its observability and performance monitoring! As supporting the Open Source ecosystem is part of my day job at Grafana Labs, I was really excited by this collaboration with the Microcks project to put into practice the use of OpenTelemetry, a project that is also part of the CNCF.
Why it matters? Microcks can be used and deployed in many topologies: from ephemeral instances with few APIs &amp;amp; services to always-up-and-running instances serving complex ecosystems of APIs in large organizations.</description></item><item><title>Extend Microcks with custom libs and code</title><link>https://microcks.io/blog/extend-microcks-with-custom-libs/</link><pubDate>Wed, 24 Jan 2024 00:00:00 +0100</pubDate><guid>https://microcks.io/blog/extend-microcks-with-custom-libs/</guid><description>With the recent Microcks 1.8.1 version, there‚Äôs an abundance of exciting enhancements, from improved OpenAPI references support to optimizations for seamless usage via Testcontainers. But, in my humble opinion, a standout feature demands your attention. Introduced in 1.8.0 (see #897) and now completed with 1.8.1 (see #966), Microcks brings forth a game-changer: extensibility. Discover how to tailor and customize behaviors with your code or library, elevating your Microcks experience to heights!</description></item><item><title>Microcks 1.8.1 release üöÄ</title><link>https://microcks.io/blog/microcks-1.8.1-release/</link><pubDate>Thu, 18 Jan 2024 00:00:00 +0100</pubDate><guid>https://microcks.io/blog/microcks-1.8.1-release/</guid><description>We are thrilled to start this New Year with a brand new Microcks release! Say hi to the 1.8.1 release of Microcks, the Open-source cloud-native tool for API Mocking and Testing üëè
This release embeds 54 resolved issues as we release an intermediary 1.8.1-M1 version to avoid some users waiting too much time. Here are the highlights of this release:
OpenAPI complex structures support was asked to handle edge cases or organizations having a great maturity on OpenAPI, Uber/All-in-one architecture simplification was required to allow further enhancements in our Shift-Left strategy and Testcontainers support, Kubernetes deployments are now better managed with Helm enhancements, enabling greater customization for an enhanced GitOps approach!</description></item><item><title>Microcks on Kind üö¢</title><link>https://microcks.io/blog/microcks-on-kind/</link><pubDate>Thu, 28 Dec 2023 00:00:00 +0100</pubDate><guid>https://microcks.io/blog/microcks-on-kind/</guid><description>I&amp;rsquo;m still on housekeeping duty! I went through my notes on installing Microcks on Kind and decided to refresh them. Network and Ingress configuration here is actually easier than in the Minikube setup.
This installation notes were ran on my Apple Mac book M2 but those steps would sensibly be the same on any Linux machine. Let&amp;rsquo;s go üöÄ
Preparation As a Mac user, I used brew to install kind. However, it is also available from several different package managers out there.</description></item><item><title>Microcks on Minikube üßä</title><link>https://microcks.io/blog/microcks-on-minikube/</link><pubDate>Wed, 27 Dec 2023 00:00:00 +0100</pubDate><guid>https://microcks.io/blog/microcks-on-minikube/</guid><description>As we close the year, it&amp;rsquo;s a good time for some housekeeping! On this occasion, I found some installation notes that could be worth transforming into proper blog posts or documentation. I went through my notes on installing Microcks on Minikube and decided to refresh them. It also needed to be completed with detailed information that we usually take for granted and forget to mention - such as network and Ingress configuration.</description></item><item><title>Microcks 1.8.0 release üöÄ</title><link>https://microcks.io/blog/microcks-1.8.0-release/</link><pubDate>Tue, 17 Oct 2023 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/microcks-1.8.0-release/</guid><description>As the seasons transition, we are excited to unveil the 1.8.0 release of Microcks, the CNCF&amp;rsquo;s open-source cloud-native tool for API Mocking and Testing, right on the cusp of winter! ‚ùÑÔ∏è üöÄ
With 47 resolved issues and 5 external PR (from new contributors) - This new release brings you a wave of new features, including AI Copilot, support for HAR artifacts, OAuth2 secured endpoint testing, Microcks super light Uber image, Testcontainers official module, two developer-friendly buttons for easy interactions (Copy as curl command and Add to your CI/CD), and an enhanced contextual help.</description></item><item><title>Microcks Joining CNCF as a Sandbox Project üéâ</title><link>https://microcks.io/blog/microcks-joining-cncf-sandbox/</link><pubDate>Tue, 27 Jun 2023 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/microcks-joining-cncf-sandbox/</guid><description>We are excited to announce that Microcks, the open-source API mocking and testing project, has been accepted as a Sandbox project by the Cloud Native Computing Foundation (CNCF).
We thank the CNCF Technical Oversight Committee (TOC) members for their validation and the TAG App Delivery team for their invaluable support during this process üôè Josh Gavant, Abigail (Abby) Bangser, Scott Rigby, Colin Griffin&amp;hellip;
üëâ See our submission form and information for the full details.</description></item><item><title>Microcks 1.7.1 release üöÄ</title><link>https://microcks.io/blog/microcks-1.7.1-release/</link><pubDate>Wed, 21 Jun 2023 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/microcks-1.7.1-release/</guid><description>The seasons follow one another and here‚Äôs a Microcks release just ready for summer ‚òÄÔ∏è. We‚Äôre proud to announce today the 1.7.1 release of Microcks - the Open source Kubernetes-native tool for API Mocking and Testing.
With 37 resolved issues - our record for a minor release - this release is an illustration of how community-driven the roadmap is: Amazon SQS &amp;amp; SNS support and Specifications goodies as well as many enhancements came directly from user requests and contributions.</description></item><item><title>Introducing Microcks Docker Desktop Extension 0.2: Enhanced Features and Increased Cadence üöÄ</title><link>https://microcks.io/blog/docker-desktop-extension-0.2/</link><pubDate>Thu, 15 Jun 2023 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/docker-desktop-extension-0.2/</guid><description>We are very excited to announce the availability of Microcks Docker Desktop Extension 0.2.0! This new version of our popular extension includes exciting enhancements designed to simplify and streamline API mocking and testing processes. This release focused on improving the user experience and expanding the extension&amp;rsquo;s capabilities. We are also excited to announce that we are increasing the frequency of our releases to provide our users with more frequent updates and features.</description></item><item><title>Join the Microcks Adopters list and Empower the vibrant open source Community üôå</title><link>https://microcks.io/blog/join-adopters-list/</link><pubDate>Wed, 24 May 2023 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/join-adopters-list/</guid><description>Open source software has revolutionized the way enterprises develop and deploy their applications. It fosters collaboration, innovation, and cost-effectiveness, enabling organizations to build secure and robust solutions while leveraging the collective knowledge and expertise of a vast and diverse community.
Microcks, the Kubernetes-Native multi-protocol open source enterprise mocking and testing API solution, is an excellent example of the power of open source projects. In this blog post, we invite enterprises and community users to join the Microcks adopters list, showcasing their support for the project and contributing to its growth.</description></item><item><title>Microcks' Backstage integration to centralize all your APIs in a software catalog üß©</title><link>https://microcks.io/blog/backstage-integration-launch/</link><pubDate>Fri, 12 May 2023 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/backstage-integration-launch/</guid><description>Identifying and managing software assets has always been a challenge! It became more and more difficult these years with the blast of multi-cloud deployments and practices like microservices. Fortunately, Backstage comes to the rescue and tends to become a standard for developer portals. Today, we are excited to announce an integration between Microcks and Backstage to ease the management of API related assets.
Contributed to the CNCF by Spotify, Backstage is, according to their website:</description></item><item><title>J.B. Hunt: Mock It till You Make It with Microcks</title><link>https://microcks.io/blog/jb-hunt-mock-it-till-you-make-it/</link><pubDate>Tue, 04 Apr 2023 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/jb-hunt-mock-it-till-you-make-it/</guid><description>Collaboration in the enterprise has many challenges which can become pitfalls and roadblocks that threaten to slow agile software development to a complete standstill. Here, I‚Äôll share how Microcks helped the Engineering and Technology team overcome obstacles and accelerate development and delivery at J.B. Hunt Transport Services, Inc.
At J.B. Hunt, it‚Äôs common for multiple software engineering teams to work in parallel across domains and products to deliver new features for our award-winning J.</description></item><item><title>Microcks 1.7.0 release üöÄ</title><link>https://microcks.io/blog/microcks-1.7.0-release/</link><pubDate>Thu, 30 Mar 2023 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/microcks-1.7.0-release/</guid><description>The end of the winter season ‚òÉÔ∏è is coming. But unlike our fellow hibernators üêª, instead of living off stores of fat, our amazing community has worked hard on yet another Microcks release - yes, version 1.7.0 is out üëè
In a few words, here are the highlights of this new release:
Some new protocols &amp;amp; connectors, you asked for it so: NATS, Google PubSub, and Postman Workspace are now available,</description></item><item><title>Microcks partners with Postman to shape next-gen multi-protocol API tooling ‚≠êÔ∏è</title><link>https://microcks.io/blog/microcks-partners-with-postman/</link><pubDate>Thu, 23 Mar 2023 00:00:00 +0100</pubDate><guid>https://microcks.io/blog/microcks-partners-with-postman/</guid><description>I‚Äôm feeling proud and honored to let you know that we‚Äôre partnering with Postman, the leading platform for API development, to define the future of multi-protocol API tooling üöÄ
From day one, Microcks had the vision of a multi-protocol API ecosystem due to the ubiquitous nature of API. This is especially true at the enterprise level where the technology strata are built over the years. This vision has been confirmed by our growing user base and community.</description></item><item><title>Microcks Docker Desktop Extension üöÄ</title><link>https://microcks.io/blog/docker-desktop-extension-launch/</link><pubDate>Mon, 26 Sep 2022 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/docker-desktop-extension-launch/</guid><description>We are excited to announce the release of Microcks&amp;rsquo; Docker Desktop Extension as we always love to support and improve the lives of our community members. üéâ
It has never been simpler to set up and use Microcks on a laptop or from anywhere you need or want thanks to Docker Desktop Extension. üôå
Without further ado, let&amp;rsquo;s take a quick look at how it functions and what it adds.</description></item><item><title>Microcks 1.6.0 release üöÄ</title><link>https://microcks.io/blog/microcks-1.6.0-release/</link><pubDate>Thu, 15 Sep 2022 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/microcks-1.6.0-release/</guid><description>We are excited to announce the 1.6.0 release of Microcks - the Open source Kubernetes-native tool for API Mocking and Testing. It has been an intense summer time for us as the previous 1.5.2 is just 3 months old!
We‚Äôre now ‚Äúback to work‚Äù and happy to release many features that were requested by our community! In a few words, here are the highlights of this new release:
Governance is certainly a huge topic and you‚Äôll see how Microcks can bring significant insights regarding the Tests Conformance of your API, Observability can be tightly linked to Governance as well and Microcks has new APIs to bring you functional and technical observability, And of course a lot more: Direct API concepts enhancements and a coming Docker Desktop extension among many others!</description></item><item><title>Microcks 1.5.2 release üöÄ</title><link>https://microcks.io/blog/microcks-1.5.2-release/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/microcks-1.5.2-release/</guid><description>We are delighted to announce the 1.5.2 release of Microcks - the Open source Kubernetes-native tool for API Mocking and Testing. This is mainly an ‚ÄúEnhancement release‚Äù pushing further the Microcks‚Äô Hub and Marketplace we introduced a few weeks ago.
In our vision, the Hub will hold a central place that will allow Microcks users to easily reuse curated API Mocks &amp;amp; Test suites in a single click - but also to share and publish their own.</description></item><item><title>Microcks‚Äô hub and marketplace!</title><link>https://microcks.io/blog/microcks-hub-announcement/</link><pubDate>Thu, 12 May 2022 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/microcks-hub-announcement/</guid><description>We are very proud to announce the launch of Microcks‚Äô community hub and free marketplace üëâ hub.microcks.io! This has been discussed and requested many times within our community and here we are üôå
The goal of this new community website is to collect, curate and share API Mocks &amp;amp; Test suites for being installed and used within any Microcks instance in a single click.
If like us you like craft beers, let‚Äôs do the analogy between this announcement üëâ freely sharing API Mocks and Test suites and a brew bar!</description></item><item><title>Microcks 1.5.1 release üöÄ</title><link>https://microcks.io/blog/microcks-1.5.1-release/</link><pubDate>Fri, 08 Apr 2022 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/microcks-1.5.1-release/</guid><description>We are proud to announce the 1.5.1 release of Microcks - the Open source Kubernetes-native tool for API Mocking and Testing. We considered it a minor release this time as it ‚Äújust‚Äù brought a new protocol binding and a lot of enhancements!
Once again this release is an illustration of how community-driven the roadmap is: AMQP and Swagger v2 support as well as more enhancements came directly from user requests. So thanks a lot to those who helped push up a new release with significant features once again.</description></item><item><title>Microcks 1.5.0 release üöÄ</title><link>https://microcks.io/blog/microcks-1.5.0-release/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0100</pubDate><guid>https://microcks.io/blog/microcks-1.5.0-release/</guid><description>We are excited to announce the 1.5.0 release of Microcks - the Open source Kubernetes-native tool for API Mocking and Testing. Just three months have passed after the previous iteration, and our supporters in the community helped us push up a new release with significant features once again. Thanks a lot to all of them üëè
In line with our mantra, this release is the evidence of our vision of a unique tool with a consistent approach for speeding up the delivery and governing the lifecycle of ALL kinds of APIs.</description></item><item><title>GraphQL features in Microcks: what to expect?</title><link>https://microcks.io/blog/graphql-features-what-to-expect/</link><pubDate>Fri, 07 Jan 2022 00:00:00 +0100</pubDate><guid>https://microcks.io/blog/graphql-features-what-to-expect/</guid><description>In various 2021 reports, GraphQL has been spotted as one of the most exciting technologies to consider for APIs. It is a query language and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.</description></item><item><title>Microcks 1.4.1 release üöÄ</title><link>https://microcks.io/blog/microcks-1.4.1-release/</link><pubDate>Fri, 15 Oct 2021 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/microcks-1.4.1-release/</guid><description>We are thrilled to announce today the 1.4.1 release of Microcks - the Open source Kubernetes-native tool for API Mocking and Testing. This release is another demonstration of the ability of Microcks to play on both sides with new Enterprise related features but also enhancement towards the Developer eXperience.
You‚Äôll see that we put a lot of effort (and love ‚ù§Ô∏è) into listening and implementing feedback and ideas from our community: the number of people that suggested, contributed or helped amplify Microcks reach in communities is huge!</description></item><item><title>Async Features with Docker Compose</title><link>https://microcks.io/blog/async-features-with-docker-compose/</link><pubDate>Mon, 30 Aug 2021 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/async-features-with-docker-compose/</guid><description>For some weeks now, many users from the Microcks community were asking for playing with AsyncAPI related features without having to setup a Minikube or a full Kubernetes instance. And Docker-Compose is the perfect match for that! We were at first reluctant as it is an additional configuration to support&amp;hellip; but developers experience FTW! üí™
This blog post is a detailed walkthrough on how to use Asynchronous related features with Docker-Compose using the new set of compose files shipped in Microcks master branch.</description></item><item><title>Microcks 1.3.0 release üöÄ</title><link>https://microcks.io/blog/microcks-1.3.0-release/</link><pubDate>Wed, 30 Jun 2021 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/microcks-1.3.0-release/</guid><description>We are so proud and happy to share this new major and important Microcks release two months in advance based on our initial roadmap! Yes, this was yet another big challenge üéâ Kudos to our community users and partners for supporting and pushing us to this momentum.
Nothing could have been done without all your feedback and contributions üëè
So why is this release so special? First, We always stay on our principles and we are still applying our mantra for supporting ALL kinds of APIs and being community driven.</description></item><item><title>Microcks 1.2.1 release üöÄ</title><link>https://microcks.io/blog/microcks-1.2.1-release/</link><pubDate>Wed, 05 May 2021 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/microcks-1.2.1-release/</guid><description>We are very glad to announce today the 1.2.1 release of Microcks - the Open source Kubernetes-native tool for API Mocking and Testing. This is mainly an ‚ÄúEnhancement release‚Äù pushing further the features we introduced within the previous 1.2.0 release.
With this release, we are still applying our mantra for supporting ALL kinds of APIs and being community driven. Want some keywords on what‚Äôs in this 1.2.1 release? We‚Äôve been working on OpenAPI v3.</description></item><item><title>Simulating CloudEvents with AsyncAPI and Microcks</title><link>https://microcks.io/blog/simulating-cloudevents-with-asyncapi/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/simulating-cloudevents-with-asyncapi/</guid><description>TL;DR: CloudEvents and AsyncAPI are complementary specifications that help define your Event Driven Architecture. Microcks allows simulation of CloudEvent to speed-up and ensure autonomy of development teams.
The rise of Event Driven Architecture¬†(EDA) is a necessary evolution step towards cloud-native applications. Events are the ultimate weapon to decouple your¬†microservices within your architecture. They are bringing great benefits like space and time decoupling, better resiliency and elasticity.
But events come also with challenges!</description></item><item><title>Podman Compose support in Microcks</title><link>https://microcks.io/blog/podman-compose-support/</link><pubDate>Thu, 25 Feb 2021 00:00:00 +0100</pubDate><guid>https://microcks.io/blog/podman-compose-support/</guid><description>While Docker is still the #1 option for software packaging and installation on the developer laptop, Podman is gaining traction. Podman advertises itself as a drop-in replacement for Docker. Just put alias podman=docker and you would be good to go, they said üòâ
Whilst the reality is a bit more nuanced, we made the necessary adjustment to make it as simple. Today it is a pleasure to contribute back this adaptation to the Microcks community!</description></item><item><title>Microcks 1.2.0 release üöÄ</title><link>https://microcks.io/blog/microcks-1.2.0-release/</link><pubDate>Sun, 21 Feb 2021 00:00:00 +0100</pubDate><guid>https://microcks.io/blog/microcks-1.2.0-release/</guid><description>We are delighted to announce the 1.2.0 release of Microcks - the Open source Kubernetes-native tool for API Mocking and Testing. With this new release, we are pursuing further our vision of a unique tool and consistent approach for speeding up the delivery and governing the lifecycle of ALL kinds of APIs - whether synchronous or asynchronous.
In this release, we put a lot of effort (and love ‚ù§Ô∏è) into listening and implementing feedback and ideas from our community.</description></item><item><title>Advanced Dispatching and Constraints for mocks</title><link>https://microcks.io/blog/advanced-dispatching-constraints/</link><pubDate>Thu, 28 Jan 2021 00:00:00 +0100</pubDate><guid>https://microcks.io/blog/advanced-dispatching-constraints/</guid><description>The purpose of this post is to explain the advanced dispatching and constraint features available when mocking a REST API using Microcks. As I recently went again through the documentation answering questions on our Discord chat, I realized that all the pieces were present but we did not have any overall example showing how to use them!
So I setup this new example based on a real life use-case our community users have submitted.</description></item><item><title>Continuous Testing of ALL your APIs</title><link>https://microcks.io/blog/continuous-testing-all-your-apis/</link><pubDate>Thu, 03 Dec 2020 00:00:00 +0100</pubDate><guid>https://microcks.io/blog/continuous-testing-all-your-apis/</guid><description>We talk a lot about asynchronous API lately at Microcks! We added many new innovative features taking advantage of the AsyncAPI specification. These are nice additions but we do not want them to hide the foundational essence of Microcks: offering you a consistent approach whatever the type of API. See our Why Microcks ? post for a refresher.
With this post we want to demonstrate how traditional REST API and event-based API can be used together and how Microcks can leverage your OpenAPI and AsyncAPI assets to ease the testing of scenarios involving both of them.</description></item><item><title>Integrating Microcks into Apicurio Keycloak</title><link>https://microcks.io/blog/integrating-in-apicurio-keycloak/</link><pubDate>Fri, 20 Nov 2020 00:00:00 +0100</pubDate><guid>https://microcks.io/blog/integrating-in-apicurio-keycloak/</guid><description>Microcks is an amazing tool that helps developers mock their APIs seamlessly using OpenAPI specs. This makes it easy for distributed teams to develop complex micro-services without having to wait for full development cycles to complete, thus maximising team efficiencies.
Apicurio Studio is another great tool to start creating your API documentation via a fully integrated OpenAPI spec editor and adds features like ability to view your documentation live as teams collaborate and edit specs on the editor in real-time.</description></item><item><title>Apache Kafka Mocking and Testing</title><link>https://microcks.io/blog/apache-kafka-mocking-testing/</link><pubDate>Tue, 17 Nov 2020 00:00:00 +0100</pubDate><guid>https://microcks.io/blog/apache-kafka-mocking-testing/</guid><description>We see Apache Kafka being more and more commonly used as an event backbone in new organizations everyday. This is irrefutable. And while there are challenges adopting new frameworks and paradigms for the apps using Kafka, there is also a critical need to govern events and speed-up delivery. To improve time-to-market, organizations need to be able to develop without waiting for the whole system to be up and running ; and they will need to validate that the components talking with Kafka will send or receive correct messages.</description></item><item><title>Microcks 1.1.0 release üöÄ</title><link>https://microcks.io/blog/microcks-1.1.0-release/</link><pubDate>Mon, 09 Nov 2020 00:00:00 +0100</pubDate><guid>https://microcks.io/blog/microcks-1.1.0-release/</guid><description>We are very thrilled to announce today Microcks 1.1.0 release ‚Äî the Open source Kubernetes-native tool for API Mocking and Testing. What a ride it has been over the last months since 1.0.0 release and our announcement of AsyncAPI support !
We received a huge amount of positive feedback from our community including many newcomers. So we took the time to come back and explain where we are coming from and what is our project purpose: see the &amp;ldquo;Why Microcks ?</description></item><item><title>Why Microcks?</title><link>https://microcks.io/blog/why-microcks/</link><pubDate>Tue, 20 Oct 2020 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/why-microcks/</guid><description>Microcks recently reached a key milestone as we officially announced on Aug 11th 2020 the release of Microcks 1.0.0, being our first General Availability (GA) version. With it we deliver the promise of providing an enterprise-grade solution to speed up, secure and scale your API strategy for the digital era ‚Äî whatever the type of services or API.
As we have received massive supportive feedback since August, we consider it a great opportunity to take some time to come back to the reasons why we started Microcks, especially for the newcomers.</description></item><item><title>Microcks 1.0.0 release üöÄ</title><link>https://microcks.io/blog/microcks-1.0.0-release/</link><pubDate>Tue, 11 Aug 2020 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/microcks-1.0.0-release/</guid><description>Today is a very special day as we launch Microcks 1.0.0 and as it materializes a vision we had 18 months ago when starting investing more time on what was just a fun side-project at that time. That vision was about building one simple, scalable and consolidating tool for all the Enterprise services mocking and testing needs ‚Äî whatever the type of services or API: green-field or legacy. Today, Microcks is the only Open source Kubernetes native tool for API Mocking and Testing supporting REST APIs, SOAP WebServices and now asynchronous / event-driven APIs!</description></item><item><title>Install Microcks on AWS for a test drive üß™</title><link>https://microcks.io/blog/install-microcks-on-aws/</link><pubDate>Fri, 26 Jun 2020 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/install-microcks-on-aws/</guid><description>Whilst we recommend installing Microcks on Kubernetes for easy management and enhanced capabilities, it can also be deployed onto a regular Virtual Machine. This post details how you can setup Microcks onto an AWS EC2 instance if you‚Äôre familiar with this environment and want a quick test drive. It takes something like 6‚Äì7 minutes to complete from end-to-end. It‚Äôs an illustration of setup documentation using Docker Compose.
This will give you a Microcks installation on an AWS EC2 instance running Ubuntu 18.</description></item><item><title>Microcks 0.9.0 release üöÄ</title><link>https://microcks.io/blog/microcks-0.9.0-release/</link><pubDate>Sun, 17 May 2020 00:00:00 +0200</pubDate><guid>https://microcks.io/blog/microcks-0.9.0-release/</guid><description>I am delighted to announce Microcks release 0.9.0 ‚Äî the Open source Kubernetes native tool for API Mocking and Testing. This new version introduces a tremendous amount of enhancements and new features.
Big thanks to our growing community for all the work done, the raised issues and the collected feedback during the last 5 months to make it possible.
This release was the preparation to become more Enterprise-grade, and we are glad that Microcks is in production in more and more medium to large organisations.</description></item><item><title>Alain Pham</title><link>https://microcks.io/author/alain-pham/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microcks.io/author/alain-pham/</guid><description>Principal Solutions Engineer at Grafana Labs</description></item><item><title>Carol Gschwend</title><link>https://microcks.io/author/carol-gschwend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microcks.io/author/carol-gschwend/</guid><description>Senior Software Engineer at J.B. Hunt</description></item><item><title>Diane Mueller</title><link>https://microcks.io/author/diane-mueller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microcks.io/author/diane-mueller/</guid><description>Managing Director, Research and Advisory Services at Bitergia</description></item><item><title>Hugo Guerrero</title><link>https://microcks.io/author/hugo-guerrero/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microcks.io/author/hugo-guerrero/</guid><description>Chief Software Architect, APIs &amp;amp; Integration Developer Advocate at Red Hat</description></item><item><title>Laurent Broudoux</title><link>https://microcks.io/author/laurent-broudoux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microcks.io/author/laurent-broudoux/</guid><description>Co-founder of Microcks | Director of Engineering at Postman Open Technologies</description></item><item><title>Ludovic Pourrat</title><link>https://microcks.io/author/ludovic-pourrat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microcks.io/author/ludovic-pourrat/</guid><description>API Architect | Platform Architect at Lombard Odier</description></item><item><title>Nicolas Masse</title><link>https://microcks.io/author/nicolas-masse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microcks.io/author/nicolas-masse/</guid><description>Principal Solution Architect at Red Hat</description></item><item><title>Nikolay Afanasyev</title><link>https://microcks.io/author/nikolay-afanasyev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microcks.io/author/nikolay-afanasyev/</guid><description>Lead Developer</description></item><item><title>Sebastien Fraigneau</title><link>https://microcks.io/author/sebastien-fraigneau/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microcks.io/author/sebastien-fraigneau/</guid><description>Senior Software Engineer at CNAM</description></item><item><title>Yacine Kheddache</title><link>https://microcks.io/author/yacine-kheddache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microcks.io/author/yacine-kheddache/</guid><description>Co-founder of Microcks | Director of Product Strategy &amp;amp; Innovation at Postman Open Technologies</description></item></channel></rss>