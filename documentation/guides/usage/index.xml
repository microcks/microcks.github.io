<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Usage on API Mocking and Testing | Microcks.io</title><link>https://microcks.io/documentation/guides/usage/</link><description>Recent content in Usage on API Mocking and Testing | Microcks.io</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Fri, 10 Jan 2025 00:00:00 +0100</lastBuildDate><atom:link href="https://microcks.io/documentation/guides/usage/index.xml" rel="self" type="application/rss+xml"/><item><title>Importing Services &amp; APIs</title><link>https://microcks.io/documentation/guides/usage/importing-content/</link><pubDate>Wed, 26 Feb 2020 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/guides/usage/importing-content/</guid><description>Overview This guide will show you and discuss the different options for importing Services and APIs into Microcks. There is basically two different ways of putting new content into Microcks:
Pushing content to Microcks via Upload, Having Microcks pulling content via Importer. We will see the different ways of doing things as weel of the pros and cons of the different methods.
1. Import content via Upload Via the UI The most simple way of adding new Services or APIs mocks to your Microcks instance is by directly uploading the artifact.</description></item><item><title>Setting custom dispatcher</title><link>https://microcks.io/documentation/guides/usage/custom-dispatchers/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/usage/custom-dispatchers/</guid><description> ðŸª„ To Be Created
This is a new documentation page that has to be written as part of our Refactoring Effort.
Goal of this page
Load a sample API and explain on how to proceed via the UI Add x-microcks-operation attributes and re-load the API to check the effect Discuss the availability of API Metadata or API call to do that</description></item><item><title>Applying constraints to mocks</title><link>https://microcks.io/documentation/guides/usage/mocks-constraints/</link><pubDate>Tue, 18 Jun 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/usage/mocks-constraints/</guid><description>Overview Sometimes it may be required to specify additional constraints onto a mock operation. Constraints that are related to API behaviour or semantic may be hard even impossible to express with an API contract. Microcks allows you to specify such constraints by editing the properties of a Service or API operation.
This guide will introduce you the concepts of Microcks parameters constraints that allows you to customize the behavior and the validation of your mocks.</description></item><item><title>Configuring stateful mocks</title><link>https://microcks.io/documentation/guides/usage/stateful-mocks/</link><pubDate>Mon, 29 Jul 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/usage/stateful-mocks/</guid><description>Overview Microcks allows to specifiy dynamic mock content using expressions since the early days. Most of the time, those features help in translating the dynamic behaviour of an API and provide meaningful simulations. However, you may need sometime to provide even more realistic behaviour and that&amp;rsquo;s where stateful mocks may be of interest.
ðŸ’¡ Stateful mocks are available starting with Microcks 1.10.0.
In this guide, we&amp;rsquo;ll go through the different concepts that are used and useful when wanting to configure statful mocks with Microcks.</description></item><item><title>Generating Direct API</title><link>https://microcks.io/documentation/guides/usage/direct-api/</link><pubDate>Sun, 01 Sep 2019 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/usage/direct-api/</guid><description>Overview Eventhough Microcks promotes a contract first approach for defining mocks, in real-life it may be difficult starting that way without a great maturity on API and Service contracts. You often need to play a bit with a fake API to really figure out their needs and how you should then design API contract. In order to help with this situation, Microcks offers the ability to directly generate an API that you may use as a sandbox.</description></item><item><title>Developing with Testcontainers</title><link>https://microcks.io/documentation/guides/usage/developing-testcontainers/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/guides/usage/developing-testcontainers/</guid><description>Overview This guide will provide you with pointers on how to embed Microcks into your unit tests with the help of Testcontainers. The project now provides official modules for Testcontainers via a partenership with AtomicJar, the company behind this fantastic library!
Youâ€™ll learn how to automatically launch and shut down Microcksâ€™ instances so that you can easily test your API clients and API contracts. You can find information on the official module on Testcontainers Microcks page.</description></item></channel></rss>