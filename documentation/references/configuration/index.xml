<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Configuration Reference on API Mocking and Testing | Microcks.io</title><link>https://microcks.io/documentation/references/configuration/</link><description>Recent content in Configuration Reference on API Mocking and Testing | Microcks.io</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Mon, 09 Dec 2024 00:00:00 +0100</lastBuildDate><atom:link href="https://microcks.io/documentation/references/configuration/index.xml" rel="self" type="application/rss+xml"/><item><title>Application Configuration</title><link>https://microcks.io/documentation/references/configuration/application-config/</link><pubDate>Mon, 29 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/configuration/application-config/</guid><description>Overview This page aims to give you a comprehensive reference on the configuration properties used within Microcks. These informations are the ideal companion of the Architecture &amp;amp; Deployment Options explanations and will be crucial for people who:
Want to install Microcks - providing info on what can be configured and what are the defaut values, Want to customize configurations - providing info on what can be used to provide customized Docker-Compose files, Want to develop or extend Microcks - providing comprehensive info on what&amp;rsquo;s externalized as properties and guidelines on how to extend.</description></item><item><title>Security Configuration</title><link>https://microcks.io/documentation/references/configuration/security-config/</link><pubDate>Mon, 29 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/configuration/security-config/</guid><description>Overview This page aims to give you a comprehensive reference on the configuration properties used within Microcks. These informations are the ideal companion of the Architecture &amp;amp; Deployment Options explanations and will be crucial for people who want to review the different security related capabilities of a deployment.
Network Using proxy for egress connections You can force the main Webapp component to use a corporate proxy for egress using the application.</description></item><item><title>Helm Chart Parameters</title><link>https://microcks.io/documentation/references/configuration/helm-chart-config/</link><pubDate>Mon, 29 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/configuration/helm-chart-config/</guid><description>Introduction One easy way of installing Microcks is via a Helm Chart. Kubernetes version 1.17 or greater is required. It is assumed that you have some kind of Kubernetes cluster up and running available. This can take several forms depending on your environment and needs:
Lightweight Minikube on your laptop, see Minikube project page, A Google Cloud Engine account in the cloud, see how to start a Free trial, Any other Kubernetes distribution provider.</description></item><item><title>Operator Configuration</title><link>https://microcks.io/documentation/references/configuration/operator-config/</link><pubDate>Mon, 29 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/configuration/operator-config/</guid><description>Introduction Operators are next-gen installer, maintainer and life-cycle manager for Kubernetes native applications. Operators are a Kubernetes native piece of software (aka Kube controller) that manages specific Custom Resources defining their domain of expertise. Microcks provide an Operator that was developed using the Operator Framework SDK and that is distributed via OperatorHub.io.
Microcks project currently proposes two operator with different maturity:
The Ansible-based Operator is the legacy one. It is production release and currently distributed via OperatorHub.</description></item></channel></rss>