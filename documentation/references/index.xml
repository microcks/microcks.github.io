<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>References on API Mocking and Testing | Microcks.io</title><link>https://microcks.io/documentation/references/</link><description>Recent content in References on API Mocking and Testing | Microcks.io</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Mon, 13 Jan 2025 00:00:00 +0100</lastBuildDate><atom:link href="https://microcks.io/documentation/references/index.xml" rel="self" type="application/rss+xml"/><item><title>Container Images</title><link>https://microcks.io/documentation/references/container-images/</link><pubDate>Mon, 13 May 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/container-images/</guid><description>Introduction Microcks components are distributed as OCI container images that can be executed using container runtimes such as Docker or Podman. All our container images are produced for both linux/amd64 and linux/arm64 architectures.
The components container image tags are respecting the following versioning scheme:
The x.y.z tag identifies a released and stable version of the image, produced from a GitHub repo tag. This is an immutable tag, The latest tag identifies the latest released and stable version of the image.</description></item><item><title>Mock Templates</title><link>https://microcks.io/documentation/references/templates/</link><pubDate>Tue, 11 Feb 2020 00:00:00 +0100</pubDate><guid>https://microcks.io/documentation/references/templates/</guid><description>Introduction This page contains the comprehensive lists of variables and functions that can be used to genete dynamic mock content in Microcks.
There is 3 different kinds of expressions that can be used to generate dynamic content in mocks when included into the {{ }} expression marker:
Variables Reference Expressions allow reusing elements from an incoming request, accessed from variables, Context Expressions allow reusing elements from the request processing context, Function Expressions allow generating dynamic data using helper functions.</description></item><item><title>Test Parameters</title><link>https://microcks.io/documentation/references/test-endpoints/</link><pubDate>Mon, 29 Apr 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/test-endpoints/</guid><description>Introduction From the page displaying basic information on your API or Service mocks, you have the ability to launch new tests against different endpoints that may be representing different environment into your development process. Hitting the NEW TEST&amp;hellip; button, leads you to the following form where you will be able to specify a target URL for the test, as well as a Runnerâ€”a testing strategy for your new launch:
This reference documentation walks you through the different parameters available when launching a new test on Microcks.</description></item><item><title>API Metadata Format</title><link>https://microcks.io/documentation/references/metadada/</link><pubDate>Thu, 16 May 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/metadada/</guid><description>Introduction Some Microcks mocks specific metadata or properties cannot be fully deduced from common attributes coming from OpenAPI or AsyncAPI. Thus we should rely on default values can be later overwritten by manager within Microcks either using the UI or through the Microcks API.
ðŸ’¡ For OpenAPI and AsyncAPI, we introduced OpenAPI extensions and AsyncAPI extensions to allow providing this informations using x-microcks properties.
But sometimes you don&amp;rsquo;t want to add some x-microcks extensions attributes into AsyncAPI / OpenAPI document OR you&amp;rsquo;d need to specify these metadata and properties for some other artifact types like Protobuf + Postman Collection for GRPC mocking for instance ðŸ˜‰.</description></item><item><title>API Examples Format</title><link>https://microcks.io/documentation/references/examples/</link><pubDate>Fri, 26 Jul 2024 00:00:00 +0200</pubDate><guid>https://microcks.io/documentation/references/examples/</guid><description>Introduction APIExamples format is Microcks&amp;rsquo; own specification format for defining examples intented to be used by Microcks mocks. It can be seen as a lightweight, general purpose specification to solely serve the need to provide mock datasets. The goal of this specification is to keep the Microcks adoption curve very smooth with development teams but also for non developers.
ðŸ’¡ APIExamples artifacts are supported starting with Microcks 1.10.0.
APIExamples files are simple YAML and aim to be very easy to understand and edit.</description></item></channel></rss>